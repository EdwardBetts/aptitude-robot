#!/usr/bin/env perl
# vim: set filetype=perl :
use strict;
use warnings;
use 5.010;
use English qw( -no_match_vars );
use Carp;
use autodie;

main() unless caller(0);

sub main {
    use Pod::Usage;
    use Getopt::Long qw( :config auto_help pass_through );

    my $help;
    my $show_cmdline;
    my $force_install;
    my $config_dir = '/etc/aptitude-robot';
    GetOptions(
        'help'          => \$help,
        'show-cmdline'  => \$show_cmdline,
        'force-install' => \$force_install,
        'config-dir=s'  => \$config_dir,
    );
    pod2usage('-verbose' => 2, '-exit_status' => 0) if $help;
    pod2usage() if @ARGV;

    my $aptitude_robot = Aptitude::Robot::Command->new(
        config_dir => $config_dir,
        force_install => $force_install
    );
    die $aptitude_robot->error_msg() . "\n" if $aptitude_robot->error_msg();

    my @command = ();
    push @command, 'echo' if $show_cmdline;
    push @command, $aptitude_robot->command();
    system(@command);
    if ($CHILD_ERROR == -1) {
        die "aptitude failed to execute: $OS_ERROR\n";
    }
    else {
        my $exit_code = ($CHILD_ERROR >> 8);
        printf STDERR "aptitude exited with value %d\n", $exit_code;
        exit $exit_code;
    }
}

BEGIN{
package Aptitude::Robot::Command;
use Any::Moose;
use File::Slurp;

has( 'config_dir' => (
        isa      => 'Str',
        is       => 'ro',
        required => 1,
    )
);
has( 'force_install' => (
        isa      => 'Bool',
        is       => 'rw',
        default  => 0,
    )
);
has( 'error_msg'  => (
        isa      => 'Str',
        is       => 'ro',
        init_arg => undef,
        default  => sub {
            my $self = shift;
            if ( -d $self->config_dir() . '/pkglist.d/.' ) {
                return '';
            }
            else {
                return 'Error: ' . $self->config_dir . ' is not a aptitude-robot config directory';
            }
        },
    )
);

sub command {
    my $self = shift;
    return () if $self->error_msg();

    my %pkg_action = ();
    for my $line ($self->pkglist_lines()) {
        my ($action, $pkg) = split(/\s+/, $line, 2);

        # ignore extra ':' and '=' entries on force-install
        next if
            $self->force_install()        and
            defined($pkg_action{$pkg})    and
            ($action eq ':' or $action eq '=');

        $pkg_action{$pkg} = $action;
    }
    my @cmd = ( 'aptitude', '-y', $self->options(), 'full-upgrade' );
    for my $pkg (sort keys %pkg_action) {
        push(@cmd, $pkg . $pkg_action{$pkg});
    }
    return @cmd;
}

sub options {
    my $self = shift;
    return () if $self->error_msg();

    my $options_file = $self->config_dir() . '/options';
    return () unless -f $options_file;

    return
        _split_parameters(
            _clean_comments_and_whitespace(
                read_file($options_file)));
}

sub pkglist_files {
    my $self = shift;
    return () if $self->error_msg();

    my $cmd = '/bin/run-parts --list ' . $self->config_dir() . '/pkglist.d';
    return split("\n", `$cmd`);
}

sub pkglist_lines {
    my $self = shift;
    return () if $self->error_msg();

    my @files = $self->pkglist_files();
    my @lines = ();
    for my $file (@files) {
        push(@lines, read_file($file));
    }
    return _clean_comments_and_whitespace( @lines );
}

sub _clean_comments_and_whitespace {
    my (@lines) = @_;

    for my $line (@lines) {
        $line =~ s{\# .+ \Z}{}xms; # remove comments
        $line =~ s{\A \s+}{}xms; # remove leading space
        $line =~ s{\s+ \Z}{}xms; # remove trailing space
    }
    return grep { $_ ne '' } @lines; # non-empty lines only
}

sub _split_parameters {
    my (@lines) = @_;

    my @parameters = ();
    for my $line (@lines) {
        push(@parameters, split(qr(=|\s+), $line, 2));
    }
    return @parameters;
}

no Any::Moose;

1;
}

__END__

=head1 NAME

aptitude-robot - automate package choice management

=head1 SYNOPSIS

aptitude-robot [options]

aptitude-robot --help

=head1 DESCRIPTION

aptitude-robot uses configuration files to install and remove Debian software
packages automatically.  This allows hands-off setup and maintenance of
workstations and servers.  Create package lists in a development environment
and copy the package lists over to the production machines.  aptitude-robot
will then make sure that the packages mentioned in the lists are installed or
removed as indicated.

=head1 OPTIONS

=over 4

=item B<--config-dir F</path/to/config/dir>>

specify an alternate configuration directory.  Defaults to /etc/aptitude-robot

=item B<--show-cmdline>

only show the command that would be executed

=item B<--help>

Prints this page.

=back

=head1 AUTHOR

Elmar S. Heeb <elmar@heebs.ch>

=cut
